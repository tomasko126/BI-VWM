
Mary Ann Davidson, CSO Oracle – under fire
My alerts lit up like a Christmas tree this morning with trending Tweets that poke fun at Oracle over its attitude to bug hunting and reverse engineering. Mary Ann Davidson, chief security officer at Oracle lit a fire by posting something of a rant in the Oracle community blogs. The post was subsequently taken down but is available via the Wayback Machine. Unfortunately, that did not extinguish the fire.
I’ve read Ms Davidson’s post a couple of times in an effort to figure out what’s going on. She starts by talking about her fiction writing as way more fun than some of the letters she’s penning to customers. But then she goes on to say:
Recently, I have seen a large-ish uptick in customers reverse engineering our code to attempt to find security vulnerabilities in it. <Insert big sigh here.> This is why I’ve been writing a lot of letters to customers that start with “hi, howzit, aloha” but end with “please comply with your license agreement and stop reverse engineering our code, already.”
I can understand the ire at reverse engineering but I wonder whether Ms Davidson’s approach to this topic is warranted in the context of bug hunts and security.
For those unfamiliar, Oracle, along with every other big vendor, ships millions of code lines. The application code is complex. It is inevitable that bugs will turn up. It is a racing certainty. Some releases are better than others. Some are bug ridden. It happens. Some bugs lie dormant for months and years, others surface quickly. In short, bug fixing is a major undertaking and one that always has a security implication.
Vendors like Oracle and SAP are super sensitive to security issues because their customers demand rock solid secure systems. Anything that threatens that reputation is taken very seriously. In this case, Ms Davidson while starting off well enough, expanded the discussion into a general swipe at security researchers. She says:
I can understand that in a world where it seems almost every day someone else had a data breach and lost umpteen gazillion records to unnamed intruders who may have been working at the behest of a hostile nation-state, people want to go the extra mile to secure their systems. That said, you would think that before gearing up to run that extra mile, customers would already have ensured they’ve identified their critical systems, encrypted sensitive data, applied all relevant patches, be on a supported product release, use tools to ensure configurations are locked down – in short, the usual security hygiene – before they attempt to find zero day vulnerabilities in the products they are using. And in fact, there are a lot of data breaches that would be prevented by doing all that stuff, as unsexy as it is, instead of hyperventilating that the Big Bad Advanced Persistent Threat using a zero-day is out to get me! Whether you are running your own IT show or a cloud provider is running it for you, there are a host of good security practices that are well worth doing.
All totally fair. But it is when we get to the topic of reverse engineering and especially that undertaken by consultants, that things take a confrontational tone:
Often, they [printouts] are not much more than a pile of steaming … FUD. (That is what I planned on saying all along: FUD.) This is why we require customers to log a service request for each alleged issue (not just hand us a report) and provide a proof of concept (which some tools can generate).
It doesn’t get better as Davidson warms to her theme:
If we determine as part of our analysis that scan results could only have come from reverse engineering (in at least one case, because the report said, cleverly enough, “static analysis of Oracle XXXXXX”), we send a letter to the sinning customer, and a different letter to the sinning consultant-acting-on-customer’s behalf – reminding them of the terms of the Oracle license agreement that preclude reverse engineering, So Please Stop It Already.
This, I think is where things get difficult for Oracle. The legalese may be in place as a big stick over which to beat anyone up but that doesn’t answer the fundamental issue: why are customers reverse engineering? Why the uptick? Why would they do that? And why does Oracle have so little faith in the broader community? Davidson provides an explanation from her point of view, arguing that she doesn’t really wan’t to beat customers over the head with the licensing terms:
More like, “I do not need you to analyze the code since we already do that, it’s our job to do that, we are pretty good at it, we can – unlike a third party or a tool – actually analyze the code to determine what’s happening and at any rate most of these tools have a close to 100% false positive rate so please do not waste our time on reporting little green men in our code.” I am not running away from our responsibilities to customers, merely trying to avoid a painful, annoying, and mutually-time wasting exercise.
Well, it’s not quite like that. In her own words:
The point of our prohibition against reverse engineering is intellectual property protection, not “how can we cleverly prevent customers from finding security vulnerabilities – bwahahahaha – so we never have to fix them – bwahahahaha.”
This is a problem for Oracle which has a deserved reputation for suing anyone it believes has infringed the company’s IP. While Davidson endeavors to make a good case for insisting on ‘no reverse engineering,’ it is the IP protection policy Oracle has pursued for many years that is at issue. This makes her sometimes jocular attempts at explanation difficult to parse as a wholly convincing argument.
The facts of enterprise software life are changing. Vulnerabilities are a near everyday feature of the technical media. Some are more worrying than others. In the past I have been vocal about poor practices by some vendors that have chosen to pivot from consumer technology to enterprise and then suddenly found they have little or no expertise in what that means. But this is an order of magnitude more important to Oracle and its customers.
Other media have used this story as an opportunity to vent against what they see as Oracle’s hostile relationship with researchers. Those on Twitter who follow this have been harsh. For its part, Oracle removed the post. Although I can find no formal press release, threatpost says:

A statement sent by Oracle PR said that the company removed the post because it didn’t fit with the company’s relationship with customers.
“The security of our products and services has always been critically important to Oracle. Oracle has a robust program of product security assurance and works with third party researchers and customers to jointly ensure that applications built with Oracle technology are secure. We removed the post as it does not reflect our beliefs or our relationship with our customers,” said Edward Screven, Executive Vice President and Chief Corporate Architect, at Oracle.

That’s not credible. Ms Davidson has been at Oracle for 25 years. You don’t get to stay that long in that company or rise to her position as Oracle’s CSO unless you are one of those who charges hard on topics that matter to the company and delivers on the company’s expectations.
In her post, Davidson comes across as frustrated. That’s entirely understandable and human, something that is often missed in the enterprise software bear pit. It doesn’t have to be that way.
In my recent dealings with Oracle, I’ve found their executives to be much more open than I expected, much more willing to listen to reasoned arguments based upon broader views of the market, and much more sympathetic to points of view that make sense from the customer perspective.
While Ms Davidson’s tone may not be to everyone’s taste, taking down the post is a lost opportunity for Oracle to hear what others have to say and for Oracle to show the security community the what and why of its position. Oracle doesn’t and should not bend to the childish mob mentality that often pervades security conversations. However, attempting to fight fire with fire doesn’t work for Oracle. There is too much bad blood and history around for that tactic to prove effective.
This topic may well be a media storm in a teacup but its ramifications run deep. My hope is that for all the frustration, Oracle will find a way to engage with those who have a more measured view, the outcome for which is a better experience for everyone concerned.
Disclosure: SAP and Oracle are premier partners at time of writing
Read more on: Security 