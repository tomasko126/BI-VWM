
Apurva Dave, chief talker, Jut
I recently listened to hybrid cloud arguments put forward by Apurva Dave, ‘chief talker’ Jut. It was a robust discussion on both sides. Putting aside the inevitable marketing spin that plays to an agenda, I found some of the broader arguments persuasive. Here’s the back story.
Jut is an early stage vendor that addresses an interesting problem in the analytics space. From the product blurbs:
Jut is the first data flow analytics platform for all of your operational data, including logs, metrics, and events. With Jut you can take an analytics approach to monitoring, troubleshooting, understanding, and improving your software.
If that sounds gnarly, then you’d be right. I’ll get into this a bit later but for now, know the solution covers both structured and unstructured data. Why a hybrid model? Dave explains in his post Why SaaS sucks :
When we started building Jut it seemed like a no-brainer to me that we’d end up with your typical multi-tenant SaaS environment.
However, where we ended up was somewhere pretty different – a new model that we call Hybrid SaaS. It combines the easy cloud delivery of SaaS applications and management with the control and flexibility of on-premise software.
During our conversation, Dave acknowledged the term ‘hybrid’ is loaded and means different things to different people. What problem led Jut down what might be viewed by some as a counter-intuitive road? It is important to understand that Jut is aiming at the professional IT developer, not the end user community. IT shops have a natural tendency towards control but, in this case, the reasons are more readily justifiable than is usually the case.
Many had strong concerns about sending data out to other cloud providers. The developers I am talking about are building custom code where that code is central to the business and where the information produced has competitive value. You also see that in larger and established companies – such as banks, insurance, and manufacturing businesses. One gaming company we spoke to said they keep all data behind a firewall.
I countered by arguing that the most sensitive data I know about relate to payroll. That data has been flying around public networks for many years without an apparent problem. Dave took a different tack saying that information, as opposed to data, is where the developer concerns lay. This jibes well with something tangential Brian Sommer discussed last week:
The vendor may use a persistent storage database to hold older, slower or a backup copy of data. If you want to make a copy of your firm’s data in this environment, understand that it might be a huge data file and that some latency will exist between the data in use (in-memory) and the archival information on the persistent drives.
While none of this should be a major technical issue, how’s your IT shop going to know that it is backing up the right data and where it should be getting this data? This is especially tricky if the vendor has no utility to give customers for this backup activity.
There are other arguments. For example, in geographies where data sovereignty issues are obstacles to deployment, there may be no choice other than to deploy in a hybrid manner. Anyone architecting for global deployment needs to take into account an unknown set of restrictions.
Jut solves this in a relatively simple way. On the client side, the developer downloads the equivalent of an executable that runs locally, while data is processed wherever the developer wishes to store it. Jut relies upon juttle, its proprietary data flow programming language. The big idea is that juttle provides a single user interface to handle manipulations, controls and visualizations that include a collaborative framework.
Let’s switch gears. In a recent all hands call, Phil Wainewright and I briefly debated the on-premises versus hybrid versus public cloud arguments as they relate to the future of software. I do not think public cloud is the only way, any more than I considered client/server as the ‘always right’ model of the 1990s and early 2000s. Phil is much more persuaded by the public cloud view for reasons that are well rehearsed. Check his rant about cloud-washing of NIST definitions (also worth a read: Stuart’s red-tape wrapped rant at flawed European cloud thinking).
Phil is of the view that he and I are coming at this from different world views that inevitably skew our biases. It is a fair point, but it is not the whole story. As we have seen in this brief discussion, developers have to make pragmatic choices.
My sense is that the real challenge comes from an alignment between developers and those who use the software. End users could not care less what is going on behind the scenes provided they get what they need. So, while Jut is finding new ways to achieve quick wins for inside developer groups, it strikes me that these are baby steps. It is what happens when these kinds of tool end up in the hands of ISVs that things get more interesting to me. We are some way off that.
Read more on: Analytics planning and data analysisDevOps NoSQL and the open source stack 