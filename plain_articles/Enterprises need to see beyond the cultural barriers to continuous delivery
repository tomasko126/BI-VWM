
Harpreet Singh
As is often the case these days, the biggest problem facing enterprise users when it comes to utilising the Continuous Delivery (CD) of applications software is a cultural one. Little of the language talked about CD maps onto the cultural or operational norms that are the foundations of certainty for such people.
Yet, as this week’s Jenkins User Conference in London showed, there is now growing pressure on enterprises to take the step into the world of CD and DevOps.
Forrester Principal Analyst, Kurt Bittner is now seeing a recent uptick in acceptance of the need for CD in large enterprises, even if they are not doing yet. There is a growing realisation that they have to do it.
There does need to be common culture between the applications development and operations side of the enterprise these days, if only from the PoV of speed of response.
This is becoming one of the key pressure points on accepting the need for `DevOps’ in advancing how enterprises deliver information services, as Bittner pointed out:
When it comes to enterprises making the move to CD we get them to analyse their current approach to releasing new applications code.
The one thing they find with the normal release cycle of their internally developed applications is the intrusion of the wait state. Forrester’s experiences here suggest that up to 70% of the elapsed time of the release cycle is accumulated wait states, where people or operational stages in the process are waiting for some other process to be completed. Utilising CD practices can cut out at least some of these, and probably most of them, he suggested.
Jenkins provides an environment which allows developers to continuously integrate new developments into applications code – be that a major addition or upgrade, a temporary addition for a specific task, or just a minor adjustment or bug fix that makes for smoother operations. This includes the (as much as possible) automated testing of the code, so that it is release ready.
In addition, it then provides the tools to manage pushing that updated code out to the end user systems, and, if required, managing all stages of its deployment and functioning in the production environment.
Perhaps most important of all is that Jenkins, despite being a classic child of the Java/open source world, is now ready for prime-time as a mainstream, large enterprise tool that can provide them with greater operational flexibility, reliability and business agility.
And while many enterprise CIOs might consider the DevOps/Continuous Delivery approach as being only applicable to new, cutting edge applications, it now comes in a fully supported, enterprise-ready distribution from Cloudbees.
It also has the benefit of being application code agnostic, which means that it can be used with any application, including old legacy code. As Cloudbees’ VP of product management, Harpreet Singh noted, there is now a wide spread of plug-ins now available to integrate Jenkins with a wide range of different environments:
There are now over a thousand plug-ins available, and anyone can produce one. We are now seeing enterprise developers starting to address Jenkins working with legacy applications and environments. Indeed, I was looking through the latest additions the other week and spotted a plug-in for IBM z/OS, so someone is using it with a mainframe.
This does raise some interesting questions for enterprise users as to how they might exploit it in such circumstances, for as Bittner pointed out the legacy apps aren’t built in the loosely coupled and modular way that can fully exploit DevOps and CD practices. It is easy, therefore, for enterprise users to think that the CD approach is not for them.
However, as Mario Cruz, founder and CTO of Choose Digital, observed, there is still an important role for it to play:
‘Continuous’ means having a build-ready release always ready to go – it doesn’t mean you have to release it, however. So for enterprise users it is a change in culture.
But in practice not that much of a change in that bug fixes, additions, modifications or whatever can, and should be made and included in the complete application code as a build that is ready for release at any time. This is then the case even if the application is the least modular code ever developed. This is using the CD approach of continuous development and integration of code regardless of release date.
That date can then be either a long-planned and scheduled time, or a rapid response to a specific emergency situation. In either case, using the DevOps/CD approach means the latest, release-ready code of the appropriate modules are ready to go. And if `module’ equates to the entire application so be it.
Benefits in practice
There are other benefits to going down the CD route for enterprises, as Masood Jan, ATG Merchandising Architect for the Kingfisher Group, observed. This is the company behind such well-known UK brands as B&Q and Screwfix, where online trading is becoming as important to the overall business as direct sales in the stores:
Time to market is becoming a bigger issue for these companies, with poor applications release processes leading to low customer retention rates, high online basket abandonment, and incompatibilities over working with multiple devices.
Continuous deliverer
This is a direct impact on two of the most important aspects of online trading – being able to exploit omnichannel marketing and selling, and reducing agility in meeting customer needs. …..and in retail, agility is becoming a defining requirement of a successful business.
Kingfisher is therefore now using Jenkins for continuous integration, continuous deployment, automated testing, deployment of incrementally updated databases and production deployment across different infrastructures. Jan said:
This does mean we can deliver to new infrastructures when required, which is proving to be part of the attraction to companies considering the Kingfisher Group.
He also indicated that while online customers may approach a familiar brand name – Screwfix for example – they can also then purchase products that are available from other companies within the Group even though they are not in that brand’s product store product portfolio:
We are finding that Jenkins provides stable releases, with websites that are compatible with the mobile devices customers increasingly use. This means that customer retention has gone up, and there is a higher conversion rate of website visitor to customer.
My take
The biggest problem for enterprises looking at CD is now a cultural one. `Continuous’ is in practice a relative term rather than an absolute, but the latter interpretation will serve to make enterprise users wary.
Perhaps the phrase `Appropriate Delivery’ would feel safer for enterprise users, or even ATADAU – `Appropriately Timed and Automatically Delivered Application Updates’. A bit of a mouthful, but if it gets enterprises users beyond the cultural urge to run away, maybe it will serve a purpose.
Read more on: Cloud ERP financials and supply chainDevOps NoSQL and the open source stackFrictionless enterpriseInfrastructureMobileSecurity 